// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations：一对多
  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follows[] @relation("following") // 关注该user的用户
  following Follows[] @relation("follower") // 该user关注的用户

  notifications        Notification[] @relation("userNotifications") // 该user收到的通知
  notificationsCreated Notification[] @relation("notificationCreator") // 该user创建的通知
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  // Relations
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId]) // 一个用户只能对一个post点赞一次
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  // Relations
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade) // 关注该user的用户
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade) // 该user关注的用户

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String // 接收通知的用户
  creatorId String // 通知的创建者
  type      NotificationType
  read      Boolean          @default(false) // 是否已读
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())

  // Relations
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
